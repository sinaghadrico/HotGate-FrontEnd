/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IStakingInterface extends ethers.utils.Interface {
  functions: {
    "TeleportDAOToken()": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "claimReward(address)": FunctionFragment;
    "earnedTDT(address)": FunctionFragment;
    "equivalentStakingShare(uint256)": FunctionFragment;
    "equivalentTDT(uint256)": FunctionFragment;
    "instantRouter()": FunctionFragment;
    "owner()": FunctionFragment;
    "setInstantRouter(address)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "stakedAmount(address)": FunctionFragment;
    "stakingShare(address)": FunctionFragment;
    "totalStakingShare()": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TeleportDAOToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "claimReward", values: [string]): string;
  encodeFunctionData(functionFragment: "earnedTDT", values: [string]): string;
  encodeFunctionData(
    functionFragment: "equivalentStakingShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equivalentTDT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "instantRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setInstantRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingShare",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakingShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "TeleportDAOToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earnedTDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "equivalentStakingShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "equivalentTDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInstantRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakingShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export type StakeEvent = TypedEvent<
  [string, BigNumber] & { user: string; TDTAmount: BigNumber }
>;

export type UnstakeEvent = TypedEvent<
  [string, BigNumber] & { user: string; TDTAmount: BigNumber }
>;

export class IStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStakingInterface;

  functions: {
    TeleportDAOToken(overrides?: CallOverrides): Promise<[string]>;

    changeOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earnedTDT(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    equivalentStakingShare(
      TDTAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    equivalentTDT(
      stakingShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instantRouter(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setInstantRouter(
      _instantRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedAmount(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingShare(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalStakingShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      user: string,
      _stakingShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TeleportDAOToken(overrides?: CallOverrides): Promise<string>;

  changeOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earnedTDT(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  equivalentStakingShare(
    TDTAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  equivalentTDT(
    stakingShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instantRouter(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setInstantRouter(
    _instantRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedAmount(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingShare(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalStakingShare(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    user: string,
    _stakingShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TeleportDAOToken(overrides?: CallOverrides): Promise<string>;

    changeOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    claimReward(user: string, overrides?: CallOverrides): Promise<boolean>;

    earnedTDT(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    equivalentStakingShare(
      TDTAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equivalentTDT(
      stakingShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instantRouter(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setInstantRouter(
      _instantRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedAmount(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakingShare(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalStakingShare(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      user: string,
      _stakingShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Stake(address,uint256)"(
      user?: null,
      TDTAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; TDTAmount: BigNumber }
    >;

    Stake(
      user?: null,
      TDTAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; TDTAmount: BigNumber }
    >;

    "Unstake(address,uint256)"(
      user?: null,
      TDTAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; TDTAmount: BigNumber }
    >;

    Unstake(
      user?: null,
      TDTAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; TDTAmount: BigNumber }
    >;
  };

  estimateGas: {
    TeleportDAOToken(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earnedTDT(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    equivalentStakingShare(
      TDTAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    equivalentTDT(
      stakingShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instantRouter(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setInstantRouter(
      _instantRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedAmount(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingShare(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalStakingShare(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      user: string,
      _stakingShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TeleportDAOToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earnedTDT(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    equivalentStakingShare(
      TDTAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    equivalentTDT(
      stakingShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instantRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInstantRouter(
      _instantRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedAmount(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingShare(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalStakingShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      user: string,
      _stakingShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
