/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ICCBurnRouter, ICCBurnRouterInterface } from "../ICCBurnRouter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "inputAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "speed",
        type: "uint256",
      },
    ],
    name: "CCTransfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "version",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "vin",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "vout",
        type: "bytes",
      },
      {
        internalType: "bytes4",
        name: "locktime",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "intermediateNodes",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "payWithHGT",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "requestIndex",
        type: "uint256",
      },
    ],
    name: "burnProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "bitcoinAddress",
        type: "bytes",
      },
    ],
    name: "ccBurn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "changeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "disputeBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bitcoinRelay",
        type: "address",
      },
    ],
    name: "setBitcoinRelay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_confirmationParameter",
        type: "uint256",
      },
    ],
    name: "setConfirmationParameter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wrappedBitcoin",
        type: "address",
      },
    ],
    name: "setWrappedBitcoin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wrappedBitcoin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ICCBurnRouter__factory {
  static readonly abi = _abi;
  static createInterface(): ICCBurnRouterInterface {
    return new utils.Interface(_abi) as ICCBurnRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICCBurnRouter {
    return new Contract(address, _abi, signerOrProvider) as ICCBurnRouter;
  }
}
