/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface InstantPoolInterface extends ethers.utils.Interface {
    functions: {
        "addLiquidity(address,uint256)": FunctionFragment;
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "changeOwner(address)": FunctionFragment;
        "decimals()": FunctionFragment;
        "decreaseAllowance(address,uint256)": FunctionFragment;
        "increaseAllowance(address,uint256)": FunctionFragment;
        "instantRouter()": FunctionFragment;
        "instantTransfer(address,uint256)": FunctionFragment;
        "name()": FunctionFragment;
        "owner()": FunctionFragment;
        "removeLiquidity(address,uint256)": FunctionFragment;
        "setInstantRouter(address)": FunctionFragment;
        "symbol()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "totalWrappedBitcoin()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "wrappedBitcoin()": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "addLiquidity", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "allowance", values: [string, string]): string;
    encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "instantRouter", values?: undefined): string;
    encodeFunctionData(functionFragment: "instantTransfer", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeLiquidity", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setInstantRouter", values: [string]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalWrappedBitcoin", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "wrappedBitcoin", values?: undefined): string;

    decodeFunctionResult(functionFragment: "addLiquidity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "changeOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "instantRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "instantTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeLiquidity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInstantRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalWrappedBitcoin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wrappedBitcoin", data: BytesLike): Result;

    events: {
        "AddLiquidity(address,uint256)": EventFragment;
        "Approval(address,address,uint256)": EventFragment;
        "InstantTransfer(address,uint256)": EventFragment;
        "RemoveLiquidity(address,uint256)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InstantTransfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type AddLiquidityEvent = TypedEvent<[string, BigNumber] & { user: string; wrappedBitcoinAmount: BigNumber }>;

export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber] & {
        owner: string;
        spender: string;
        value: BigNumber;
    }
>;

export type InstantTransferEvent = TypedEvent<[string, BigNumber] & { user: string; wrappedBitcoinAmount: BigNumber }>;

export type RemoveLiquidityEvent = TypedEvent<[string, BigNumber] & { user: string; wrappedBitcoinAmount: BigNumber }>;

export type TransferEvent = TypedEvent<[string, string, BigNumber] & { from: string; to: string; value: BigNumber }>;

export class InstantPool extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: InstantPoolInterface;

    functions: {
        addLiquidity(
            user: string,
            wrappedBitcoinAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        changeOwner(
            _owner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        decimals(overrides?: CallOverrides): Promise<[number]>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        instantRouter(overrides?: CallOverrides): Promise<[string]>;

        instantTransfer(
            user: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        name(overrides?: CallOverrides): Promise<[string]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        removeLiquidity(
            user: string,
            instantPoolTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setInstantRouter(
            _instantRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

        totalWrappedBitcoin(overrides?: CallOverrides): Promise<[BigNumber]>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        wrappedBitcoin(overrides?: CallOverrides): Promise<[string]>;
    };

    addLiquidity(
        user: string,
        wrappedBitcoinAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(
        _owner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
        spender: string,
        addedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    instantRouter(overrides?: CallOverrides): Promise<string>;

    instantTransfer(
        user: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
        user: string,
        instantPoolTokenAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setInstantRouter(
        _instantRouter: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalWrappedBitcoin(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    wrappedBitcoin(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        addLiquidity(user: string, wrappedBitcoinAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        changeOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

        decimals(overrides?: CallOverrides): Promise<number>;

        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        instantRouter(overrides?: CallOverrides): Promise<string>;

        instantTransfer(user: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        name(overrides?: CallOverrides): Promise<string>;

        owner(overrides?: CallOverrides): Promise<string>;

        removeLiquidity(
            user: string,
            instantPoolTokenAmount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        setInstantRouter(_instantRouter: string, overrides?: CallOverrides): Promise<void>;

        symbol(overrides?: CallOverrides): Promise<string>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        totalWrappedBitcoin(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        wrappedBitcoin(overrides?: CallOverrides): Promise<string>;
    };

    filters: {
        "AddLiquidity(address,uint256)"(
            user?: null,
            wrappedBitcoinAmount?: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; wrappedBitcoinAmount: BigNumber }>;

        AddLiquidity(
            user?: null,
            wrappedBitcoinAmount?: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; wrappedBitcoinAmount: BigNumber }>;

        "Approval(address,address,uint256)"(
            owner?: string | null,
            spender?: string | null,
            value?: null,
        ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

        Approval(
            owner?: string | null,
            spender?: string | null,
            value?: null,
        ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

        "InstantTransfer(address,uint256)"(
            user?: null,
            wrappedBitcoinAmount?: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; wrappedBitcoinAmount: BigNumber }>;

        InstantTransfer(
            user?: null,
            wrappedBitcoinAmount?: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; wrappedBitcoinAmount: BigNumber }>;

        "RemoveLiquidity(address,uint256)"(
            user?: null,
            wrappedBitcoinAmount?: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; wrappedBitcoinAmount: BigNumber }>;

        RemoveLiquidity(
            user?: null,
            wrappedBitcoinAmount?: null,
        ): TypedEventFilter<[string, BigNumber], { user: string; wrappedBitcoinAmount: BigNumber }>;

        "Transfer(address,address,uint256)"(
            from?: string | null,
            to?: string | null,
            value?: null,
        ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;

        Transfer(
            from?: string | null,
            to?: string | null,
            value?: null,
        ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;
    };

    estimateGas: {
        addLiquidity(
            user: string,
            wrappedBitcoinAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        changeOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<BigNumber>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        instantRouter(overrides?: CallOverrides): Promise<BigNumber>;

        instantTransfer(
            user: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        removeLiquidity(
            user: string,
            instantPoolTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setInstantRouter(
            _instantRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        totalWrappedBitcoin(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        wrappedBitcoin(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        addLiquidity(
            user: string,
            wrappedBitcoinAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        changeOwner(
            _owner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        instantRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        instantTransfer(
            user: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        removeLiquidity(
            user: string,
            instantPoolTokenAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setInstantRouter(
            _instantRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalWrappedBitcoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        wrappedBitcoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
