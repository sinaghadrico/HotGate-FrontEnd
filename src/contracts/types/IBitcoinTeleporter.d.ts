/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBitcoinTeleporterInterface extends ethers.utils.Interface {
  functions: {
    "TeleportDAOToken()": FunctionFragment;
    "addTeleporter(bytes)": FunctionFragment;
    "ccBurnRouter()": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "exchangeRouter()": FunctionFragment;
    "multiSigAddress()": FunctionFragment;
    "numberOfTeleporters()": FunctionFragment;
    "owner()": FunctionFragment;
    "redeemScript()": FunctionFragment;
    "redeemScriptHash()": FunctionFragment;
    "removeTeleporter(uint256)": FunctionFragment;
    "requiredLockedAmount()": FunctionFragment;
    "setCCBurnRouter(address)": FunctionFragment;
    "setExchangeRouter(address)": FunctionFragment;
    "setRequiredLockedAmount(uint256)": FunctionFragment;
    "setUnlockFee(uint256)": FunctionFragment;
    "setUnlockPeriod(uint256)": FunctionFragment;
    "setWrappedBitcoin(address)": FunctionFragment;
    "slashTeleporters(uint256,address)": FunctionFragment;
    "wrappedBitcoin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TeleportDAOToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTeleporter",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ccBurnRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "exchangeRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfTeleporters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemScript",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemScriptHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTeleporter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredLockedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCCBurnRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequiredLockedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnlockFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnlockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedBitcoin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashTeleporters",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedBitcoin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TeleportDAOToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTeleporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccBurnRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTeleporters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemScriptHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTeleporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCCBurnRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequiredLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnlockFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnlockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedBitcoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashTeleporters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedBitcoin",
    data: BytesLike
  ): Result;

  events: {
    "AddTeleporter(bytes)": EventFragment;
    "RemoveTeleporter(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddTeleporter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveTeleporter"): EventFragment;
}

export type AddTeleporterEvent = TypedEvent<
  [string] & { teleporterBitcoinAddress: string }
>;

export type RemoveTeleporterEvent = TypedEvent<
  [string] & { teleporterBitcoinAddress: string }
>;

export class IBitcoinTeleporter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBitcoinTeleporterInterface;

  functions: {
    TeleportDAOToken(overrides?: CallOverrides): Promise<[string]>;

    addTeleporter(
      teleporterAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ccBurnRouter(overrides?: CallOverrides): Promise<[string]>;

    changeOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRouter(overrides?: CallOverrides): Promise<[string]>;

    multiSigAddress(overrides?: CallOverrides): Promise<[string]>;

    numberOfTeleporters(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeemScript(overrides?: CallOverrides): Promise<[string]>;

    redeemScriptHash(overrides?: CallOverrides): Promise<[string]>;

    removeTeleporter(
      teleporterIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiredLockedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCCBurnRouter(
      _ccBurnRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchangeRouter(
      _ccTransferRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequiredLockedAmount(
      _submissionGasUsed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnlockFee(
      _unlockFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnlockPeriod(
      _unlockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWrappedBitcoin(
      _wrappedBitcoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashTeleporters(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrappedBitcoin(overrides?: CallOverrides): Promise<[string]>;
  };

  TeleportDAOToken(overrides?: CallOverrides): Promise<string>;

  addTeleporter(
    teleporterAddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ccBurnRouter(overrides?: CallOverrides): Promise<string>;

  changeOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRouter(overrides?: CallOverrides): Promise<string>;

  multiSigAddress(overrides?: CallOverrides): Promise<string>;

  numberOfTeleporters(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeemScript(overrides?: CallOverrides): Promise<string>;

  redeemScriptHash(overrides?: CallOverrides): Promise<string>;

  removeTeleporter(
    teleporterIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiredLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  setCCBurnRouter(
    _ccBurnRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchangeRouter(
    _ccTransferRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequiredLockedAmount(
    _submissionGasUsed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnlockFee(
    _unlockFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnlockPeriod(
    _unlockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWrappedBitcoin(
    _wrappedBitcoin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashTeleporters(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrappedBitcoin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    TeleportDAOToken(overrides?: CallOverrides): Promise<string>;

    addTeleporter(
      teleporterAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ccBurnRouter(overrides?: CallOverrides): Promise<string>;

    changeOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    exchangeRouter(overrides?: CallOverrides): Promise<string>;

    multiSigAddress(overrides?: CallOverrides): Promise<string>;

    numberOfTeleporters(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeemScript(overrides?: CallOverrides): Promise<string>;

    redeemScriptHash(overrides?: CallOverrides): Promise<string>;

    removeTeleporter(
      teleporterIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requiredLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    setCCBurnRouter(
      _ccBurnRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeRouter(
      _ccTransferRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequiredLockedAmount(
      _submissionGasUsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnlockFee(
      _unlockFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnlockPeriod(
      _unlockPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrappedBitcoin(
      _wrappedBitcoin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    slashTeleporters(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wrappedBitcoin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddTeleporter(bytes)"(
      teleporterBitcoinAddress?: null
    ): TypedEventFilter<[string], { teleporterBitcoinAddress: string }>;

    AddTeleporter(
      teleporterBitcoinAddress?: null
    ): TypedEventFilter<[string], { teleporterBitcoinAddress: string }>;

    "RemoveTeleporter(bytes)"(
      teleporterBitcoinAddress?: null
    ): TypedEventFilter<[string], { teleporterBitcoinAddress: string }>;

    RemoveTeleporter(
      teleporterBitcoinAddress?: null
    ): TypedEventFilter<[string], { teleporterBitcoinAddress: string }>;
  };

  estimateGas: {
    TeleportDAOToken(overrides?: CallOverrides): Promise<BigNumber>;

    addTeleporter(
      teleporterAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ccBurnRouter(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    multiSigAddress(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfTeleporters(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeemScript(overrides?: CallOverrides): Promise<BigNumber>;

    redeemScriptHash(overrides?: CallOverrides): Promise<BigNumber>;

    removeTeleporter(
      teleporterIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiredLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    setCCBurnRouter(
      _ccBurnRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchangeRouter(
      _ccTransferRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequiredLockedAmount(
      _submissionGasUsed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnlockFee(
      _unlockFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnlockPeriod(
      _unlockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWrappedBitcoin(
      _wrappedBitcoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashTeleporters(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrappedBitcoin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TeleportDAOToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTeleporter(
      teleporterAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ccBurnRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiSigAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfTeleporters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemScript(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemScriptHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTeleporter(
      teleporterIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiredLockedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCCBurnRouter(
      _ccBurnRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeRouter(
      _ccTransferRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequiredLockedAmount(
      _submissionGasUsed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnlockFee(
      _unlockFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnlockPeriod(
      _unlockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedBitcoin(
      _wrappedBitcoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashTeleporters(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrappedBitcoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
